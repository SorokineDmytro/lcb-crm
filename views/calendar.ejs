<!DOCTYPE html>
<html>
<head>
  <title>Work Log CRM</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body class="p-4">

  <!-- Week navigation and jump -->
  <div class="d-flex flex-wrap justify-content-evenly align-items-center mb-4">
    <div class="d-flex justify-content-center align-items-center gap-2" >
      <a href="/?week=<%= prevWeek %>" class="btn btn-dark">Semaine précédente</a>
      <a href="/?week=today" class="btn btn-outline-dark">Semaine actuelle</a>
      <a href="/?week=<%= nextWeek %>" class="btn btn-dark">Semaine suivante</a>
    </div>
    
    <h1 class="text-center fs-3">Semaine <%= weekNumber %> — du <%= weekStart %> au <%= weekEnd %></h1>
    
    <form method="GET" action="/" class="d-flex align-items-center gap-2">
      <input type="date" name="week" value="<%= weekStartRaw %>" class="form-control" required>
      <button type="submit" class="btn w-100 btn-dark">Aller à la semaine</button>
    </form>

    <div class="d-flex gap-5">
      <a href="/calendar-pdf?<%= weekStartRaw ? `week=${weekStartRaw}` : '' %>" target="_blank" class="btn btn-outline-dark">Imprimer</a>
      <a href="/monthly-report" class="btn btn-dark">Rapport mensuel</a>
      <a href="/workers" class="btn btn-dark">Gestion des employés</a>
    </div>
  </div>

  <form method="POST" action="/save">
    <input type="hidden" name="weekStart" value="<%= weekStartRaw %>">
    <table class="table table-bordered">
      <thead>
        <tr>
          <th class="text-center">Employé</th>
          <% weekDays.forEach(day => { %>
            <th class="text-center">
              <div><%= day.label %> - <%= day.display %></div>
            </th>
          <% }); %>
          <th class="text-center">Total (heures)</th>
        </tr>
      </thead>
      <tbody>
        <% workers.forEach(worker => {
            const workerId = worker.id;
        %>
          <tr>
            <td class="p-3 fw-bold fs-4 text-center"><%= worker.name %></td>
            <% weekDays.forEach(day => {
                const isoDate = day.iso;
                const log = logs[workerId]?.[isoDate] || {};
            %>
              <td class="p-3 text-center">
                <select name="entries[<%= workerId %>][<%= isoDate %>][status]" class="form-select form-select-sm mb-2"
                  style="
                  <% if (log.status === 'C') { %> background-color: #fcbcb8;
                  <% } else if (log.status === 'R') { %> background-color: #ffd972;
                  <% } else if (log.start1 != null && log.end1 != null) { %> background-color: #a7e8bd;
                  <% } %>
                ">
                  <option value="" <%= !log.status ? 'selected' : '' %>>Travail</option>
                  <option value="R" <%= log.status === 'R' ? 'selected' : '' %>>Repos</option>
                  <option value="C" <%= log.status === 'C' ? 'selected' : '' %>>Congé</option>
                </select>

                <div class="time-inputs">
                  <fieldset>
                    <label class="mb-2">Temps principal (0 - 23)</label>
                    <div class="d-flex gap-2">
                      <input type="number" name="entries[<%= workerId %>][<%= isoDate %>][start1]"
                            value="<%= (log.start1 !== undefined && log.start1 !== null && log.start1 !== '') 
                                        ? (Number.isInteger(log.start1) 
                                            ? log.start1 
                                            : parseFloat(log.start1).toFixed(1).replace(/\.0$/, '')) 
                                        : '' %>"
                            min="0" max="23" step="1" class="form-control form-control-sm w-50 fw-bold text-center mb-1" placeholder="Début">
                      -
                      <input type="number" name="entries[<%= workerId %>][<%= isoDate %>][end1]"
                            value="<%= (log.end1 !== undefined && log.end1 !== null && log.end1 !== '') 
                                        ? (Number.isInteger(log.end1) 
                                            ? log.end1 
                                            : parseFloat(log.end1).toFixed(1).replace(/\.0$/, '')) 
                                        : '' %>"
                            min="0" max="23" step="1" class="form-control form-control-sm w-50 fw-bold text-center mb-1" placeholder="Fin">
                    </div>
                  </fieldset>

                  <button type="button" class="btn btn-sm btn-outline-secondary mt-2 mb-1 toggle-secondary">
                    <%= (log.start2 || log.end2) ? '– Retirer la 2ᵉ plage horaire' : '+ Ajouter une 2ᵉ plage horaire' %>
                  </button>

                  <fieldset class="hoursSecondary <%= (log.start2 || log.end2) ? '' : 'd-none' %>">
                    <label class="mb-2">Temps secondaire (0 - 23)</label>
                    <div class="d-flex gap-2">
                      <input type="number" name="entries[<%= workerId %>][<%= isoDate %>][start2]"
                            value="<%= (log.start2 !== undefined && log.start2 !== null && log.start2 !== '') 
                                        ? (Number.isInteger(log.start2) 
                                            ? log.start2 
                                            : parseFloat(log.start2).toFixed(1).replace(/\.0$/, '')) 
                                        : '' %>"
                            min="0" max="23" step="1" class="form-control form-control-sm w-50 fw-bold text-center mb-1" placeholder="Début">
                      <input type="number" name="entries[<%= workerId %>][<%= isoDate %>][end2]"
                            value="<%= (log.end2 !== undefined && log.end2 !== null && log.end2 !== '') 
                                        ? (Number.isInteger(log.end2) 
                                            ? log.end2 
                                            : parseFloat(log.end2).toFixed(1).replace(/\.0$/, '')) 
                                        : '' %>"
                            min="0" max="23" step="1" class="form-control form-control-sm w-50 fw-bold text-center mb-1" placeholder="Fin">
                    </div>
                  </fieldset>

                </div>
              </td>
            <% }); %>
            <td class="p-3 fw-bold fs-5 text-center fs-4"><%= totals[workerId] || "0" %> h</td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <div class="w-100 d-flex justify-content-end">
      <button type="submit" class="btn btn-success btn-lg d-flex justify-self-end">Enregistrer</button>
    </div>
  </form>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll(".toggle-secondary").forEach(btn => {
        btn.addEventListener("click", () => {
          const fieldset = btn.nextElementSibling;
          if (fieldset.classList.contains("d-none")) {
            fieldset.classList.remove("d-none");
            btn.textContent = "– Retirer la 2ᵉ plage horaire";
          } else {
            fieldset.classList.add("d-none");
            btn.textContent = "+ Ajouter une 2ᵉ plage horaire";
            fieldset.querySelectorAll("input").forEach(input => input.value = "");
          }
        });
      });

      document.querySelectorAll("select").forEach(select => {
        const cell = select.closest("td");
        const timeInputs = cell.querySelector(".time-inputs");

        const toggleVisibility = () => {
          const value = select.value;
          if (value === "R" || value === "C") {
            // Clear all inputs when selecting Repos or Congé
            timeInputs?.querySelectorAll("input").forEach(input => input.value = "");
            
            timeInputs?.classList.add("d-none");
          } else {
            timeInputs?.classList.remove("d-none");
          }
        };

        toggleVisibility();
        select.addEventListener("change", toggleVisibility);
      });
    });
  </script>

</body>
</html>
